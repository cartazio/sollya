The tool has been restarted.
=============== Test number 21 ================
-1
The tool has been restarted.
=============== Test number 22 ================
3
The tool has been restarted.
=============== Test number 23 ================
Warning: the expression given is not a fraction. Will consider it as a fraction with denominator 1.
1
The tool has been restarted.
=============== Test number 24 ================
5 / 3
5 / 3
The tool has been restarted.
=============== Test number 25 ================
Warning: the expression given is not a fraction. Will consider it as a fraction with denominator 1.
Warning: the expression given is not a fraction. Will consider it as a fraction with denominator 1.
exp(x / 3)
exp(x / 3)
The tool has been restarted.
=============== Test number 26 ================
cos(x)
The tool has been restarted.
=============== Test number 27 ================
1
The tool has been restarted.
=============== Test number 28 ================
x^x * (1 + log(x))
The tool has been restarted.
=============== Test number 29 ================
[|-3.1415926535897932384626433832795028841971693993751, 0, 3.1415926535897932384626433832795028841971693993751|]
The tool has been restarted.
=============== Test number 30 ================
The number of points has been set to 24.
The precision has been set to 175 bits.
[|-0.27620731976955658969395873271160757157430613176756617, -0.153375369093314463053373856415089923845367286245662016, -7.241334073292277341354279209158456757611929708835963e-2, -7.2413340732922771569268803462173581357399245626850215e-2, -6.8562001979847336855782392874984841492976000520805575e-36, 0.12868915582117545963368195688501287605691694181041506|]
The tool has been restarted.
=============== Test number 31 ================
The number of points has been set to 8.
[|-0.24713873073113257661364344444399504026877021645667, 0.49713702082313212554616915823819745799022465237171|]
The tool has been restarted.
=============== Test number 32 ================
18
25
The tool has been restarted.
=============== Test number 33 ================
[|-0.24675695042278393475009541259944780067362448950599322, -0.19164513063974640135742136011628031325527988804464345, -0.145554248149418271721764550500169153912092301037746583, -0.107570572806048700953690068019994092347508577747527385, -7.486357314193808712365882447978637403239106362227434e-2, -4.7420860087340074816876054582176771338744375723325883e-2, -2.5569539511973301671265741938082704141119595025307828e-2, -9.6658829670910164628561398290543577718523826925691488e-3, -1.73030828251178554354835171964347180155527776809239316e-10|]
The tool has been restarted.
=============== Test number 34 ================
dirtyinfnorm( sin(x) , [-10;10] ) at precision 165 returns a faithful result
=============== Test number 35 ================
dirtyinfnorm( exp(cos(x)) * sin(x) , [0;5] ) at precision 15 returns a faithful result
dirtyinfnorm( exp(cos(x)) * sin(x) , [0;5] ) at precision 40 returns a faithful result
dirtyinfnorm( exp(cos(x)) * sin(x) , [0;5] ) at precision 100 returns a faithful result
dirtyinfnorm( exp(cos(x)) * sin(x) , [0;5] ) at precision 200 returns a faithful result
dirtyinfnorm( exp(x) , [1;2] ) at precision 50 returns a faithful result
dirtyinfnorm( exp(x) , [1;2] ) at precision 100 returns a faithful result
dirtyinfnorm( 11691999891702459232513188345837804387460473133465b-163 + x * (11692942107918215660346141397235181022117132379831b-163 + x * (5835438123620347449415289742932818158651775091869b-163 + x * (3984684218240970504969472776081331362033160518301b-164 + x * (26040878953088729371129411196520398147571622258327b-169 + x * 20808009114828595646273342020654371193163483094671b-170)))) - exp(x) , [0;1] ) at precision 165 returns a faithful result
dirtyinfnorm( 11691999891702459232513188345837804387460473133465b-163 + x * (11692942107918215660346141397235181022117132379831b-163 + x * (5835438123620347449415289742932818158651775091869b-163 + x * (3984684218240970504969472776081331362033160518301b-164 + x * (26040878953088729371129411196520398147571622258327b-169 + x * 20808009114828595646273342020654371193163483094671b-170)))) - exp(x) , [0;1] ) at precision 165 returns a faithful result
dirtyinfnorm( 11691999891702299312469444817572169311673890781507b-163 + x * (23385884215836760115521942647579564654384001742411b-164 + x * (1458859530913839021906884707848785355431185024535b-161 + x * (15938736871836860565882142316746025506783124556517b-166 + x * (26040878964869758854248710691789107998476450095123b-169 + x * 41616018209593462767401219418438811660046839978843b-171)))) - exp(x) , [0;1] ) at precision 165 returns a faithful result
dirtyinfnorm( 11691999891702299312469444817572169311673890781507b-163 + x * (23385884215836760115521942647579564654384001742411b-164 + x * (1458859530913839021906884707848785355431185024535b-161 + x * (15938736871836860565882142316746025506783124556517b-166 + x * (26040878964869758854248710691789107998476450095123b-169 + x * 41616018209593462767401219418438811660046839978843b-171)))) - exp(x) , [0;1] ) at precision 165 returns a faithful result
dirtyinfnorm( 5750871b-37 * x^6 + 13462391b-39 * x^5 - 7528339b-32 * x^4 + 14577171b-41 * x^3 + 5814467b-26 * x^2 - 8388607b-24 * x + 1 + 11512405b-38 * x^6 + 13401955b-39 * x^5 - 470491b-28 * x^4 + 7234989b-40 * x^3 + 11628935b-27 * x^2 - 8388607b-24 * x + 1 - (2878101b-36 * x^6 + 6700979b-38 * x^5 - 470491b-28 * x^4 + 7234987b-40 * x^3 + 11628935b-27 * x^2 - 8388607b-24 * x + 1) - log2(1 + 2^(x * (-1))) , [0;1] ) at precision 165 returns a faithful result
Warning: the expression is constant.
dirtyinfnorm( 17 , [-1;1] ) at precision 165 returns a faithful result
dirtyinfnorm( x , [-1;3b-1] ) at precision 165 returns a faithful result
dirtyinfnorm( x^2 + x - 1 , [-2;1] ) at precision 165 returns a faithful result
dirtyinfnorm( x^2 + x - 1 , [-2;2] ) at precision 165 returns a faithful result
dirtyinfnorm( sin(17 * (x - 3)) * cos(x - 3) * exp(x / 4) , [-2;2] ) at precision 165 returns a faithful result
dirtyinfnorm( sin(-51 + x * 17) * cos(-3 + x) * exp(x * 1b-2) + 4 - (5841986838484490273226357258541178809257197853603b-160 + x * (-1657010884744388725768284702475520358103564313103b-163 + x * (1566987824830335456879991047308861887585745670967b-162 + x * (18637702919758264241676014573759486129098461080361b-165 + x * (-4691389977422298284816628406735202847317903770937b-165 + x * (-3641480240898210056437514385988871012264138539689b-165)))))) , [-2;2] ) at precision 165 returns a faithful result
dirtyinfnorm( (x * (46768052394588893382517914646921013753690502283181b-165 + x * (-23842604129029764481373810400725037839108682209013b-310 + x * (-31178701596392595588345276430836652277717061563611b-167 + x * (19474296355951076471139239730950050055091215313371b-300 + x * (6235740319278519117669054529057531256595154021039b-169 + x * (-8903255600987858885078854107239112353939531067197b-291 + x * (-19004160973039296358594544346438861776255280578323b-176 + x * (13978875722788212683821368308788823202998673317847b-285 + x * (16892587531590485568360414041618499983605528356089b-182 + x * (-5509367034013013747984244537606353757286793710935b-278 + x * (-9828414563834216782252138074806120633549802775429b-188 + x * (36514821794022558047614397315048656003649092374341b-276 + x * (4032170077040468786771930826281267656340291488583b-194 + x * (-15157407289929000622398688419996925341779253679627b-271 + x * (-19661622363274627316629009823189604834794640905605b-204 + x * (9925527665865119935372490664410596660907859285007b-268 + x * 9244923258117519852493775515420083692797862150005b-211))))))))))))))))) / sin(x) - 1 , [-1b-2;1b-2] ) at precision 165 returns a faithful result
The tool has been restarted.
=============== Test number 36 ================
Warning: a bound of the interval is infinite or NaN.
This command cannot handle such intervals.
NaN
The tool has been restarted.
=============== Test number 37 ================
-0.54402111088936981340474766185137728168364301291622
-0.54400304905152629822448058882475382036536298356282
-0.54401997751158321972222697312583199035995837926893
The tool has been restarted.
=============== Test number 38 ================
Display mode is decimal numbers.
0.70710678118654752440084436210484903928483593768847
Display mode is binary numbers.
1.01101010000010011110011001100111111100111011110011001001000010001011001011111011000100110110011011101010100101010111110100111110001110101101111011000001011101010001_2 * 2^(-1)
Display mode is hexadecimal numbers.
0xb.504f333f9de6484597d89b3754abe9f1d6f60ba88p-4
Display mode is dyadic numbers.
33070006991101558613323983488220944360067107133265b-165
Display mode is dyadic numbers in integer-power-of-2 notation.
33070006991101558613323983488220944360067107133265 * 2^(-165)
The tool has been restarted.
=============== Test number 39 ================
2.5
The tool has been restarted.
=============== Test number 40 ================
x * 0.5
