#NAME $OBJECTNAME
#QUICK_DESCRIPTION returns, given a $SOLLYA object, a string that can be reparsed to the object
#CALLING $COMMAND(<obj>)
#TYPE $ANY_TYPE -> $STRING_TYPE
#LIBRARYNAME sollya_obj_t sollya_lib_objectname(sollya_obj_t);

#DESCRIPTION
$COMMAND(<obj>) queries the $SOLLYA symbol table in order to recover the
name of an identifier the object <obj> is assigned to. If it succeeds, it
returns a string containing the recovered identifier. In contrast, if it
does not succeed, it returns a string simply containing a textual
representation of§§ §~§§<obj>.

#DESCRIPTION
The only condition for an identifier to be eligible to be returned by
$COMMAND(<obj>) is to be accessible in the scope $COMMAND is executed in,
§§i.e.§\emph{i.e.}§§, not to be shadowed by an identifier of the same name which does not
hold the object <obj>.

#DESCRIPTION
In any case, if the string returned by $COMMAND is given to the $PARSE
command in the same scope, the original object <obj> is recovered.

#DESCRIPTION
$COMMAND is particularly useful in combination with $GETBACKTRACE, when
the $SOLLYA procedure stack is to be displayed in a fashion, where
procedures are identified by their name and not their procedural content.

#DESCRIPTION
$COMMAND may also be used to get a string representation of the free
mathematical variable.

#DESCRIPTION
If an object is simply to be cast into a string, without trying to
retrieve an identifier for it, $COMMAND is not appropriate. In this case,
it suffices to concatenate it to an empty string with the $CONCAT operator.

#EXAMPLE
s = "Hello";
objectname("Hello");

#EXAMPLE
f = exp(x);
g = sin(x);
[| objectname(exp(x)), objectname(sin(x)), objectname(cos(x)) |];

#EXAMPLE
o = { .f = exp(x), .I = [-1;1] };
s1 = o@""; s1;
s2 = objectname({ .I = [-1;1], .f = exp(x)}); s2;
parse(s1) == parse(s2);
write("s2 = \"", s2, "\" parses to ", parse(s2), "\n");

#EXAMPLE
n = 1664;
objectname(n);

#EXAMPLE
f = exp(x);
g = sin(x);

procedure test() {
    var f;
    var h;

    f = tan(x);
    h = cos(x);

    [| objectname(exp(x)), objectname(sin(x)), objectname(cos(x)), objectname(tan(x)) |];
};

test();

#EXAMPLE
procedure apply_proc(p, a, b) {
    return p(a, b);
};

procedure show_trace_and_add(n, m) {
    var i, bt;
    bt = getbacktrace();
    write("Procedure stack:\n");
    for i from 0 to length(bt) - 1 do {
    	write("   Procedure ", objectname((bt[i]).called_proc), " called with ", length((bt[i]).passed_args), " arguments\n");
    };
    write("\n");
    return n + m;
};

procedure show_and_succ(u) {
	  return apply_proc(show_trace_and_add, u, 1);
};

show_and_succ(16);

#EXAMPLE
f = exp(three_decker_sauerkraut_and_toadstool_sandwich_with_arsenic_sauce);
g = sin(_x_);
h = f(g);
h;
objectname(_x_);

#SEEALSO $PARSE
#SEEALSO $VAR
#SEEALSO $GETBACKTRACE
#SEEALSO $PROC
#SEEALSO $PROCEDURE
#SEEALSO $CONCAT
